from binary_tree import *
# Задание 7 (тайминг 10 минут)
# 1. Реализуем структуру бинарного дерева.
# 2. Для бинарного дерева характерно наличии двух потомков, где левый
# меньше родителя, а правый – больше.
# 3. Для реализации можно использовать как и простое числовое дерево, так и
# обобщенный тип. Учитывая, что мы строим именно бинарное дерево, то
# при использовании обобщенных типов убедитесь, что значение
# поддерживает сравнение (интерфейс Comparable)


# Задание 8 (тайминг 15 минут)
# 1. Реализуем алгоритм поиска элементов по дереву (поиск в глубину).
# 2. Для работы с бинарным деревом необходимо как минимум организовать
# метод поиска.

bt = BinaryTree(5)
x = Node(10)
x.right = Node(15)
# bt.add(Node(10))
bt.add(x)
bt.add(3)
bt.add(4)
bt.add(1)

print(bt)
print(bt.count)
bt.delete(3) # удаление узла с 2 детьми

print('----------------')
print(bt)
print(bt.count)

bt.delete(5) # удаление главного узла
print(bt.count)
# print(bt.search(bt.root, 8)[1])
print('----------------')
bt.add(10)
bt.add(15)
bt.add(3)
print(bt)
print(bt.count)

